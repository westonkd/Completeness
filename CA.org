#+startup: beamer
#+OPTIONS:toc:nil
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

#+TITLE: Cellular Automata
#+AUTHOR: Weston Dransfield

* The Basics
#+BEGIN_LaTeX
\begin{itemize}
\item<1-> Spacial Structure
\item<2-> Local Interactions
\item<3-> Cell State
\item<4-> Cell Transitions
\end{itemize}
#+END_LaTeX

* Spacial Structure
#+BEGIN_LaTeX
\begin{itemize}
\item<1-> Grid - Like a city
\item<2-> Agents - Like a home in the city
\end{itemize}
#+END_LaTeX

* Spacial Structure
#+BEGIN_LaTeX
\includegraphics[width=7cm]{images/grid.png}
#+END_LaTeX

* Local Interactions
#+BEGIN_LaTeX
Agents may only interact with a set number of agents around them. This region is called a neighborhood.
\begin{itemize}
\item<1->Von Neumann neighborhood (most local).
\item<2->Moore neighborhood (less local).
\item<3->\(n*n\) Moore neighborhood for \(n > 3\) (least local).
\end{itemize}
\pause
\pause
\pause
Locality indicates how many agents a single agent interacts with. High locality indicates more interactions (Think of how a rumor spreads).
#+END_LaTeX

* Local Interactions
#+BEGIN_LaTeX
\includegraphics[width=7cm]{images/grid.png}
#+END_LaTeX

* Cell State
#+BEGIN_LaTeX
Cells have a state
\begin{itemize}
\item<1->Binary
\item<2->Any number of states
\end{itemize}
#+END_LaTeX

* Cell Transitions
CA have discrete chunks of time called rounds. Each round produces the next "generation" of cells.

* Cell Transitions
#+BEGIN_LaTeX
The next state of a cell is a function of:
\begin{itemize}
\item<1->It's current state
\item<2->The state of cells in its neighborhood
\end{itemize}
\pause
\pause
Think of your opinion on a topic changing by being surrounded by people with a different view.
#+END_LaTeX

* Elementary Cellular Automaton
#+BEGIN_LaTeX
What is the simplest...
\begin{itemize}
\item<1->Grid of cells?
\item<2->Useful number of states?
\item<3->Neighborhood?
\end{itemize}
#+END_LaTeX

* Elementary Cellular Automaton
#+BEGIN_LaTeX
What is the simplest...
\begin{itemize}
\item<1->Grid of cells - an array
\item<1->Useful number of states - binary
\item<1->Neighborhood - 2 adjacent cells of the agent
\end{itemize}
#+END_LaTeX

* Elementary Cellular Automaton
#+BEGIN_LaTeX
How do we describe the state of cell \(c_t\) as a function of the neighbors of \(c_t\) at time \(t-1\)?
\begin{itemize}
\item<1->There are \(2^3 = 8\) neighborhood combinations for any given neighborhood.
\item<2->Simply create an assignment for each combination!
\item<3->This assignment is called a rule set (how many possible rule sets?)
\end{itemize}
#+END_LaTeX

* Example Program

* 2D CA Example - Conway's Game of Life
* Conway's Game of Life
* Conway's Game of Life Rules
* Conway's Game of Life Entities
* Conway's Game of Life is Decidability
The question - "Given a starting pattern and an ending pattern, will the starting pattern ever reach the ending pattern?"
#+BEGIN_LaTeX
\begin{itemize}
\item<2->Undecidable - halting problem
\item<3->"Indeed, since the game of life includes a pattern that is equivalent to a UTM (universal Turing machine), this "deciding" algorithm, if existed, could have been used to solve the halting problem, by taking the initial pattern as the one corresponding to a UTM+input and the later pattern as the one corresponding to a halting state of the machine with an empty tape (as one can modify the Turing machine to always erase the tape before halting). However the halting problem is provably undecidable and so such an algorithm does not exist" (Wikipedia).
\end{itemize}
#+END_LaTeX
